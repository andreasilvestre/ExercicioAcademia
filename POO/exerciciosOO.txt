#1
Implemente um programa em C# no qual o usuário deverá informar o nome e o poder (0 a 10) de três personagens. 
O programa deverá informar o nome do personagem que possuir o maior poder.

Regras que deverão ser seguidas para a implementação do algoritmo:

É obrigatório o uso de classe para representar um Personagem e a mesma deverá possuir como propriedades (características) um nome e um poder.
A classe também deverá possuir um método chamado ExibirDados. Esse método deverá exibir o nome e o poder do personagem em questão.
Ao implementar a classe é obrigatório implementar dois construtores (Sobrecarga), um que não recebe parâmetro algum e outro que 
irá receber o nome e o poder de um personagem


#2
Crie um programa em C# no qual o usuário deverá informar o nome e o tipo de cinco animais de estimação. 
O programa deverá exibir na tela para o usuário quantos Cachorros, Gatos e Peixes foram informados.

Regras que deverão ser seguidas para a implementação do programa:

Os únicos tipos de animais válidos são Cachorro, Gato, Peixe.
Caso seja informado um tipo diferente o programa repetir até o usuário digitar um tipo válido.
É obrigatório criar uma classe para representar o Animal.
A classe deverá possuir dois dados privados (propriedades) para representar as características do animal.
A classe deverá possuir métodos de acesso (propriedade getter e setter) para permitir que o usuário armazene/leia os dados dos dois dados privados (propriedades).

#3
Os quatro pilares do paradigma de Orientação a Objetos são:

A - Sequenciamento, Procedimentos, Bibliotecas e Herança.
B - Herança, Polimorfismo, Classes e Objetos.
C - Classes, Atributos, Métodos e Abstração.
D - Abstração, Encapsulamento, Herança e Polimorfismo.

#4
Imagine um jogo com asteroides e uma nave de ataque, que deve destruir os asteróides que voam em todas as direções. Dessa forma, crie um programa em C# que represente
uma lista de asteroides que deveriam ser 'inseridos' no jogo. Para isso, faça uma classe que contenha os atributos (privados) posição x, posição y (do asteroide em
um plano cartesiano), tamanho do asteroide (1 a 10), velocidade do asteroide (1 a 5) e energia (1 a 5). Para esses atributos privados, gerar os métodos de acesso
(propriedades getter e setter). Além disso, implementar 3 construtores (sobrecarga): um vazio, outro passando todos os parâmetros de um objeto tipo Asteroide, e um 
terceiro que constrói um asteroide com posição x e posição y. 
O programa principal (main) deve conter a lista de Asteroides, preenchida pelo usuário. Nesse programa principal, construir um método de classe que exiba todos os
asteróides da lista.

===========================================
#5
Crie uma classe para representar um item de cenário, com os atributos privados de:
    * descrição (string), 
    * data de criação (date - https://docs.microsoft.com/en-us/dotnet/api/system.datetime.date?view=net-6.0) e
    * altura (float). 

Crie os métodos públicos necessários para sets e gets, o construtor básico e também um método para imprimir 
todos dados de um item de cenário. 
Por fim, crie um método para calcular a quanto tempo o item foi criado, além de um programa em C# para testar
a classe criada.

#6
Crie uma classe para representar um objeto em um Plano Cartesiano. Todo objeto no plano cartesiano
tem como atributos 'x' e 'y'. Dessa forma, crie os getters e setter de 'x' e 'y', o construtor básico e
um método para exibir um objeto (x,y).
Por fim, crie um programa em C# que cadastre 'n' objetos em uma lista (List), um método de que exiba
os objetos da lista.